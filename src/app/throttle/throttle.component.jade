.container
  h3 throttle
  .panel.panel-success
    .panel-heading 对比分析
      .list-group
  .panel.panel-info
    .panel-heading throttle(节流阀) 说明
    .panel-body
      p 签名: throttle(durationSelector: function(value): Observable | Promise): Observable
      p 仅当由提供的函数所确定的持续时间已经过去时才发出值
      p 从源 Observable 中发出一个值，然后在由另一个 Observable 决定的期间内忽略 随后发出的源值，然后重复此过程
      p 当 throttle 的内部定时器禁用时，它会在输出 Observable 上发出源 Observable 的值， 并当定时器启用时忽略源值。最开始时，定时器是禁用的。一旦第一个源值达到，它会被转发 到输出 Observable ，然后通过使用源值调用 durationSelector 函数来启动定时器，这 个函数返回 "duration" Observable 。当 duration Observable 发出值或完成时，定时器 会被禁用，并且下一个源值也是重复此过程
      p 很像 throttleTime，但是沉默持续时间是由 第二个 Observable 决定的
      p durationSelector: function(value: T): SubscribableOrPromise, 该函数 从源 Observable 中接收值，用于为每个源值计算沉默持续时间，并返回 Observable 或 Promise
      p config: 用来定义 leading 和 trailing 行为的配置对象。 默认为  leading: true, trailing: false
      img.img-responsive.center-block(src="../assets/images/throttle.png")
      pre.pre-scrollable.
        弹珠图解析:
        - 操作符上方的第一条线为 源 Observable,
        - 第二条线为 duration Observable, 即起辅助通知作用的     Observable
        - throttle 相当于是个阀门,阀门一开始是打开状态,
          当有值输出后,就会关闭阀门,
          并开始订阅 duration Observable, 等待触发通知
        - 阀门下次允许打开的时机是由 duration Observable 决定的,
        - 当 duration Observable 发出值或发出已完成信号, 就会触   发通知, duration Observable 触发通知后,
          就会取消订阅 duration Observable
        - 此时阀门会再次打开, 阀门会一直开启,
          直到源 Observable 有值输出
        - 当源 Observable 有值输出后, 阀门将再次关闭, 并重新开始
          开始订阅 duration Observable, 等待下次打开的触发通知
        - 源 Observable 发出 'a' 时, 阀门处于打开状态,
          输出 'a', 并关闭阀门, 开始订阅 duration Observable
        - 源 Observable 发出 'x' 'y' 时,
          duration Observable 还没有触发通知, 阀门仍处于关闭状态,
          没有值输出
        - duration Observable 发出已完成信号, 阀门打开,
          但此时源 Observable 没有值发出,因此也没有值输出
        - 因源 Observable 没有值发出, 阀门一直打开
        - 源 Observable 发出 'b' 时, 阀门处于打开状态,
          输出 'b', 并关闭阀门, 重新开始订阅 duration Observable
        - 以此类推
  .panel.panel-info
    .panel-heading 示例1: 弹珠图示例
    .panel-body
      pre.pre-scrollable([innerHtml]="demo1Info")
      p
        button.btn.btn-primary(type="button",
          [disabled]="isRuning",
          (click)="runDemo1();$event.stopPropagation()") 运行
