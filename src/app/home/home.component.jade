.container
  .panel.panel-info
    .panel-heading 过滤
    .panel-body
      .list-group
        a.list-group-item([routerLink]="['/debounce']")
          h4.list-group-item-heading debounce 防抖
          p.list-group-item-text
            | 根据一个选择器函数，舍弃掉在两次输出之间小于指定时间的发出值
        a.list-group-item([routerLink]="['/debounce-time']")
          h4.list-group-item-heading debounceTime 防抖
          p.list-group-item-text
            | 只有在特定的一段时间经过后并且没有发出另一个源值，才从源 Observable 中发出一个值
        a.list-group-item([routerLink]="['/distinct-until-changed']")
          h4.list-group-item-heading distinctUntilChanged 剔除重复前值
          p.list-group-item-text
            | 只在当前值与之前最后一个值不同时才将其发出
        a.list-group-item([routerLink]="['/filter']")
          h4.list-group-item-heading filter 过滤
          p.list-group-item-text
            | 发出符合给定条件的值
        a.list-group-item([routerLink]="['/first']")
          h4.list-group-item-heading first 查找第一个
          p.list-group-item-text
            | 只发出第一个值。或者只发出第一个通过测试的值
        a.list-group-item([routerLink]="['/ignore-elements']")
          h4.list-group-item-heading ignoreElements 值忽略
          p.list-group-item-text
            | 忽略源 Observable 所发送的所有项，只传递 complete 或 error 的调用
        a.list-group-item([routerLink]="['/last']")
          h4.list-group-item-heading last 查找最后一个
          p.list-group-item-text
            | 根据提供的表达式，在源 observable 完成时发出它的最后一个值
        a.list-group-item([routerLink]="['/sample']")
          h4.list-group-item-heading sample
          p.list-group-item-text
            | 发出源 Observable 最新发出的值当另一个 notifier Observable发送时
        a.list-group-item([routerLink]="['/single']")
          h4.list-group-item-heading single
          p.list-group-item-text
            | 该 Observable 发出源 Observable 所发出的值中匹配指定 predicate 函数的单个项。 如果源 Observable 发出多于1个数据项或者没有发出数据项, 分别以 IllegalArgumentException 和 NoSuchElementException 进行通知
        a.list-group-item([routerLink]="['/skip']")
          h4.list-group-item-heading skip 按数量跳过
          p.list-group-item-text
            | 跳过N个(由参数提供)发出值
        a.list-group-item([routerLink]="['/skip-until']")
          h4.list-group-item-heading skipUntil
          p.list-group-item-text
            | 跳过源 observable 发出的值，直到提供的 observable 发出值
        a.list-group-item([routerLink]="['/skip-while']")
          h4.list-group-item-heading skipWhile
          p.list-group-item-text
            | 跳过源 observable 发出的值，直到提供的表达式结果为 false
        a.list-group-item([routerLink]="['/take']")
          h4.list-group-item-heading take 按数量截取
          p.list-group-item-text
            | 只发出源 Observable 最初发出的的N个值 (N = count)
        a.list-group-item([routerLink]="['/take-until']")
          h4.list-group-item-heading takeUntil
          p.list-group-item-text
            | 发出源 Observable 发出的值，直到 notifier Observable 发出值
        a.list-group-item([routerLink]="['/take-while']")
          h4.list-group-item-heading takeWhile 按条件截取
          p.list-group-item-text
            | 发出值，直到提供的表达式结果为 false
        a.list-group-item([routerLink]="['/throttle']")
          h4.list-group-item-heading throttle
          p.list-group-item-text
            | 仅当由提供的函数所确定的持续时间已经过去时才发出值
        a.list-group-item([routerLink]="['/throttle-time']")
          h4.list-group-item-heading throttleTime
          p.list-group-item-text
            | 当指定的持续时间经过后发出最新值
  .panel.panel-info
    .panel-heading 组合
    .panel-body
      .list-group
        a.list-group-item([routerLink]="['/combine-all']")
          h4.list-group-item-heading combineAll 最新值合并
          p.list-group-item-text
            | 通过等待外部 Observable 完成,然后应用 combineLatest ，将高阶 Observable 转化为一阶 Observable。
        a.list-group-item([routerLink]="['/combine-latest']")
          h4.list-group-item-heading combineLatest 最新值合并
          p.list-group-item-text
            | 结合传入的多个 Observables, 当任意 observable 发出值时，发出每个 observable 的最新值
        a.list-group-item([routerLink]="['/concat']")
          h4.list-group-item-heading concat 串行拼接
          p.list-group-item-text
            | 按串行顺序发出每个给定的输入 Observable 中的所有值
        a.list-group-item([routerLink]="['/concat-all']")
          h4.list-group-item-heading concatAll 串行拼接
          p.list-group-item-text
            | 通过顺序地连接内部 Observable，将高阶 Observable 转化为一阶 Observable
        a.list-group-item([routerLink]="['/fork-join']")
          h4.list-group-item-heading forkJoin 尾值组合
          p.list-group-item-text
            | 当所有 observables 完成时发出每个 observable 的最新值
        a.list-group-item([routerLink]="['/merge']")
          h4.list-group-item-heading merge 序列融合
          p.list-group-item-text
            | 通过把多个 Observables 的值混合到一个 Observable 中来将其打平
        a.list-group-item([routerLink]="['/merge-all']")
          h4.list-group-item-heading mergeAll 序列融合
          p.list-group-item-text
            | 将高阶 Observable 转换成一阶 Observable ，一阶 Observable 会同时发出在内部 Observables 上发出的所有值
        a.list-group-item([routerLink]="['/pairwise']")
          h4.list-group-item-heading pairwise 配对
          p.list-group-item-text
            | 将当前值和前一个值作为数组放在一起，然后将其发出
        a.list-group-item([routerLink]="['/race']")
          h4.list-group-item-heading race 竞争
          p.list-group-item-text
            | 使用首先发出值的 observable
        a.list-group-item([routerLink]="['/start-with']")
          h4.list-group-item-heading startWith 前缀序列
          p.list-group-item-text
            | 返回的 Observable 会先发出作为参数指定的项，然后再发出由源 Observable 所发出的项
        a.list-group-item([routerLink]="['/with-latest-from']")
          h4.list-group-item-heading withLatestFrom 合并最新值
          p.list-group-item-text
            | 还提供另一个 observable 的最新值
        a.list-group-item([routerLink]="['/zip']")
          h4.list-group-item-heading zip 按序组合
          p.list-group-item-text
            | 订阅所有内部 observables，然后等待每个发出一个值。一旦发生这种情况，将发出具有相应索引的所有值
